import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import CssModulesPlugin from "esbuild-css-modules-plugin";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const overwriteCssPlugin = {
	name: "overwrite-css-plugin",
	setup(build) {
		build.onEnd(() => {
			const outdir = build.initialOptions.outdir || ".";
			const originalCssPath = path.join(outdir, "main.css");
			const targetCssPath = path.join(".", "styles.css");

			if (fs.existsSync(originalCssPath)) {
				fs.copyFileSync(originalCssPath, targetCssPath);
				console.log(
					`Overwritten ${targetCssPath} with ${originalCssPath}`,
				);
			} else {
				console.warn(`CSS file not found: ${originalCssPath}`);
			}
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	plugins: [
		CssModulesPlugin({
			// @see https://github.com/indooorsman/esbuild-css-modules-plugin/blob/main/index.d.ts for more details
			force: true,
			emitDeclarationFile: {
				".d.css.ts": "types",
			},
			localsConvention: "camelCaseOnly",
			namedExports: true,
			inject: false,
		}),
		overwriteCssPlugin,
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
