import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import CssModulesPlugin from "esbuild-css-modules-plugin";
import pkg from "esbuild-plugin-wasm-pack";
const { wasmPack } = pkg;

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

let wasmPlugin = {
	name: "wasm",
	setup(build) {
		build.onResolve({ filter: /\.wasm$/ }, (args) => {
			if (args.resolveDir === "") {
				return;
			}
			console.log(`resolved: ${args.path}`);
			return {
				path: path.isAbsolute(args.path)
					? args.path
					: path.join(args.resolveDir, args.path),
				namespace: "wasm-binary",
			};
		});

		build.onLoad(
			{ filter: /.*/, namespace: "wasm-binary" },
			async (args) => ({
				contents: await fs.promises.readFile(args.path),
				loader: "binary",
			}),
		);
	},
};
function CopyPlugin({ filesToCopy }) {
	return {
		name: "copy-plugin",
		setup(build) {
			build.onEnd(() => {
				const outdir = path.dirname(
					build.initialOptions.outfile || ".",
				);
				for (const file of filesToCopy) {
					const outfile = path.join(outdir, file);
					if (!fs.existsSync(path.dirname(outfile))) {
						fs.mkdirSync(path.dirname(outfile));
					}
					fs.copyFileSync(file, outfile);
					console.log(`copied ${file} to ${outfile} `);
				}
				const originalCssPath = path.join(outdir, "main.css");
				const targetCssPath = path.join(outdir, "styles.css");

				if (fs.existsSync(originalCssPath)) {
					fs.copyFileSync(originalCssPath, targetCssPath);
					console.log(
						`Overwritten ${targetCssPath} with ${originalCssPath}`,
					);
				} else {
					console.warn(`CSS file not found: ${originalCssPath}`);
				}
			});
		},
	};
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: prod
		? "main.js"
		: "./test-vault-numbat/.obsidian/plugins/numbat-obsidian/main.js",
	minify: prod,
	plugins: [
		wasmPlugin,
		CssModulesPlugin({
			// @see https://github.com/indooorsman/esbuild-css-modules-plugin/blob/main/index.d.ts for more details
			force: true,
			// emitDeclarationFile: {
			// 	".d.css.ts": "types",
			// },
			localsConvention: "camelCaseOnly",
			namedExports: true,
			inject: false,
		}),
		CopyPlugin({
			filesToCopy: [
				"manifest.json",
				"versions.json",
				"pkg/numbat_wasm_bg.wasm",
			],
		}),
		{
			name: "place-hotreload",
			setup(build) {
				build.onEnd(() => {
					if (!prod) {
						const outdir = path.dirname(
							build.initialOptions.outfile,
						);
						const hotReloadFilePath = path.join(
							outdir,
							".hotreload",
						);
						fs.writeFileSync(hotReloadFilePath, "");
						console.log(`Created empty file: ${hotReloadFilePath}`);
					}
				});
			},
		},
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
